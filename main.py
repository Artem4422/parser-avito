import logging
import asyncio
import requests

from parser import parse_avito_direct1  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞


from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import time
import re
from datetime import datetime, timedelta
import logging
import requests
from bs4 import BeautifulSoup
import random
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import sqlite3

import sqlite3

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ–π)
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å—Å—ã–ª–∫–∏
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    subscription_active BOOLEAN DEFAULT FALSE,
    tracking_filter TEXT,
    tracking_url TEXT,  -- –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    state TEXT,  -- –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    last_check DATETIME  -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
)
""")
conn.commit()







conn.commit()

def add_user(user_id, username):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()

def set_subscription(user_id, active):
    cursor.execute("UPDATE users SET subscription_active = ? WHERE user_id = ?", (active, user_id))
    conn.commit()
    logging.info(f"Subscription for user {user_id} set to {active}")


def get_subscription(user_id):
    cursor.execute("SELECT subscription_active FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else False

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
async def parse_user(user_id):
    print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await asyncio.sleep(5)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
    print(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


API_TOKEN = "8084563968:AAGe7c9M_oscVQR6Cd_3yEmNJsa7yWpPcD8"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ê–≤–∏—Ç–æ

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
def parse_avito_direct(url):
    try:
        headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Accept-Language": "en-US,en;q=0.9",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1",
    "DNT": "1",
}

        response = requests.get(url, headers=headers)
        response.raise_for_status()

        logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}, –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response.text)}")

        soup = BeautifulSoup(response.text, "lxml")
        items = []

        ads = soup.find_all("div", class_="iva-item-content-OWwoq")  # –ö–ª–∞—Å—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ads)} –±–ª–æ–∫–æ–≤ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ 3
        ads = ads[:3]

        for ad in ads:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_tag = ad.find("h3")
            title = title_tag.text.strip() if title_tag else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            # –¶–µ–Ω–∞
            price_tag = ad.find("strong", class_="styles-module-root-LEIrw")
            price_span = price_tag.find("span") if price_tag else None
            price = price_span.text.strip() if price_span else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            # –°—Å—ã–ª–∫–∞
            link_tag = ad.find("a", href=True)
            link = "https://www.avito.ru" + link_tag['href'] if link_tag else "–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_tag = ad.find("img")
            image = image_tag['src'] if image_tag else None

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            seller_name = "–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            seller_rating = "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"
            seller_reviews = "–û—Ç–∑—ã–≤—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
            time_published = "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            if link != "–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                try:
                    item_response = requests.get(link, headers=headers)
                    item_response.raise_for_status()
                    item_soup = BeautifulSoup(item_response.text, "lxml")

                    # –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                    seller_name_tag = item_soup.find("div", class_="styles-module-root-Zabz6 styles-module-margin-top_none-_c4I_ styles-module-margin-bottom_none-QChmM styles-module-direction_vertical-_gIBq")
                    seller_name = seller_name_tag.text.strip() if seller_name_tag else "–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

                    # –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞
                    rating_tag = item_soup.find("span", class_="styles-module-theme-_4Zlk styles-module-theme-kvanA")
                    seller_rating = rating_tag.text.strip() if rating_tag else "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"

                    # –û—Ç–∑—ã–≤—ã –ø—Ä–æ–¥–∞–≤—Ü–∞
                    reviews_tag = item_soup.find("span", class_=["sstyles-module-root-o3j6a styles-module-size_m-n6S6Y styles-module-size_m-HtjNQ stylesMarningNormal-module-root-_BXZU stylesMarningNormal-module-paragraph-m-pH9s3"])
                    seller_reviews = reviews_tag.text.strip() if reviews_tag else "–û—Ç–∑—ã–≤—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

                    # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    time_tag = item_soup.find("div", class_="style-seller-info-name-uWwYv js-seller-info-name")
                    time_published = time_tag.text.strip() if time_tag else "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

            logging.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {title}, –¶–µ–Ω–∞: {price}, –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}, –†–µ–π—Ç–∏–Ω–≥: {seller_rating}, –û—Ç–∑—ã–≤—ã: {seller_reviews}, –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {time_published}, –°—Å—ã–ª–∫–∞: {link}")

            items.append({
                "title": title,
                "price": price,
                "link": link,
                "image": image,
                "time_published": time_published,
                "seller_name": seller_name,
                "seller_rating": seller_rating,
                "seller_reviews": seller_reviews,
            })

        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return items

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []






@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    add_user(user_id, message.from_user.username)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    subscription_active = get_subscription(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    user_data[user_id] = {"subscription_active": subscription_active}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_status = "–ê–∫—Ç–∏–≤–Ω–∞" if subscription_active else "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id FROM users WHERE tracking_filter IS NOT NULL AND subscription_active = TRUE")
    users = cursor.fetchall()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    text = (
        "‚ÑπÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
        f"üîë ID –ö–∞–±–∏–Ω–µ—Ç–∞: {message.from_user.id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"https://t.me/scanurik_bot?start={message.from_user.id}\n"
        f"üóÇ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫: {subscription_status}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    )

    # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo_url = "https://via.placeholder.com/500"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", callback_data="main_search")],
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_photo(chat_id=message.chat.id, photo=photo_url, caption=text, reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "main_search")
async def main_search(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
    subscription_active = user_data.get(user_id, {}).get("subscription_active", False)
    if not subscription_active:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        subscription_active = get_subscription(user_id)

    if not subscription_active:
        await call.message.answer("–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")
        return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä
    user_data[user_id] = {"state": "awaiting_filter"}




    
### –ú–µ—Å—Ç–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—å—è–≤–ª–µ–Ω–∏–π 


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
sent_items = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
def execute_query(query, params=()):
    try:
        cursor.execute(query, params)
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä
@dp.callback_query(lambda c: c.data == "start_tracking")
async def start_tracking(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT state FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result and result[0] == 'tracking':
        await call.message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä –ê–≤–∏—Ç–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
    cursor.execute("REPLACE INTO users (user_id, state) VALUES (?, ?)", (user_id, "awaiting_tracking_url"))
    conn.commit()


def filter_item(user_id, item):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–æ–π —Ü–µ–Ω–æ–π –∏ –∞–¥—Ä–µ—Å–æ–º
    if user_id in sent_items:
        for sent_item in sent_items[user_id]:
            if sent_item['price'] == item['price'] and sent_item['address'] == item['address']:
                return False  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    else:
        # –ï—Å–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        sent_items[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
    sent_items[user_id].append(item)
    return True  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–æ–≤—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä –∏ –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@dp.message(lambda message: "avito.ru" in message.text)
async def handle_link_trac(message: types.Message):
    user_id = message.from_user.id
    link = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if "avito.ru" not in link:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞ –ê–≤–∏—Ç–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE users SET tracking_url = ?, state = ? WHERE user_id = ?", (link, 'tracking', user_id))
    conn.commit()

    await message.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {link}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
    items = await parse_avito_direct1(user_id, bot, message.chat.id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id, bot, chat_id

    if not items:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    cursor.execute("UPDATE users SET state = ? WHERE user_id = ?", ('waiting_for_next_item', user_id))
    conn.commit()

    # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
    for item in items:
        if not filter_item(user_id, item):
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            print(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–æ–≤–∞—Ä–∞: {item['title']} (–¶–µ–Ω–∞: {item['price']}, –ê–¥—Ä–µ—Å: {item['address']})")
            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await send_item_trac(user_id, message.chat.id)
            break  # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
async def send_item_trac(user_id, chat_id):
    user = user_data.get(user_id)
    if not user or "items" not in user:
        await bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    items = user["items"]
    index = user["current_index"]

    if index < 0 or index >= len(items):
        await bot.send_message(chat_id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞.")
        return

    item = items[index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"<b>{item['title']}</b>\n" \
           f"–¶–µ–Ω–∞: {item['price']} —Ä—É–±.\n" \
           f"–ê–¥—Ä–µ—Å: {item['address']}\n" \
           f"<a href='{item['link']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"

    # –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {item['title']} - {item['price']} —Ä—É–±.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if item['image']:
        await bot.send_photo(chat_id, photo=item['image'], caption=text, parse_mode="HTML")
    else:
        await bot.send_message(chat_id, text, parse_mode="HTML")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
    user_data[user_id]["current_index"] += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏—Ç—å
    if user_data[user_id]["current_index"] < len(items):
        await send_item_trac(user_id, chat_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ


##

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
@dp.message()
async def handle_link(message: types.Message):
    user_id = message.from_user.id
    link = message.text.strip()

    

    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ ASCII
    link = re.sub(r"[^\x00-\x7F]+", "", link)  # –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ ASCII

    if "avito.ru" not in link:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞ –ê–≤–∏—Ç–æ.")
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
    if user_data.get(user_id, {}).get("state") == "awaiting_filter":
        await message.answer("–ò—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

        items = parse_avito_direct(link)
        
        if not items:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id] = {"items": items, "current_index": 0}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await send_item(user_id, message.chat.id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        user_data[user_id]["state"] = None













###
@dp.callback_query(lambda c: c.data == "buy_subscription")
async def buy_subscription(call: types.CallbackQuery):
    text = (
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 100—Ä –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payment")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "confirm_payment")
async def confirm_payment(call: types.CallbackQuery):
    admin_id = "7830802188"  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = call.from_user.id

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
        ]
    )
    await bot.send_message(admin_id, text, reply_markup=keyboard)
    await call.message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@dp.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_subscription(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    set_subscription(user_id, True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[user_id]["subscription_active"] = True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.edit_text("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)




@dp.callback_query(lambda call: call.data.startswith("decline_"))
async def decline_subscription(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await call.message.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@dp.callback_query(lambda call: call.data.startswith("approve_"))
async def approve_subscription(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
    subscription_active = get_subscription(user_id)
    
    if subscription_active:
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.")

@dp.callback_query(lambda c: c.data.startswith("decline_"))
async def decline_subscription(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await call.message.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")



async def send_item(user_id, chat_id):
    user = user_data.get(user_id)
    if not user or "items" not in user:
        await bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    items = user["items"]
    index = user["current_index"]

    if index < 0 or index >= len(items):
        await bot.send_message(chat_id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞.")
        return

    item = items[index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    if index > 0:
        buttons.append([InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data="prev")])
    if index < len(items) - 1:
        buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ", callback_data="next")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"<b>{item['title']}</b>\n" \
       f"–¶–µ–Ω–∞: {item['price']}\n" \
       f"üïô {item['seller_name']} (–µ—Å–ª–∏ –ø–∏—à–µ—Ç —Å–ø—Ä–æ—Å–∏—Ç–µ - –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–∫—Ä—ã–ª)\n" \
       f"–†–µ–π—Ç–∏–Ω–≥: {item['seller_rating']}\n" \
       f"–û—Ç–∑—ã–≤—ã: {item['seller_reviews']}\n" \
       f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {item['time_published']}\n" \
       f"<a href='{item['link']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if item['image']:
        await bot.send_photo(chat_id, photo=item['image'], caption=text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard)



# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query()
async def handle_navigation(call: types.CallbackQuery):
    user = user_data.get(call.from_user.id)
    if not user:
        await call.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    if call.data == "prev":
        user["current_index"] -= 1
    elif call.data == "next":
        user["current_index"] += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await send_item(call.from_user.id, call.message.chat.id)
    await call.answer()






import asyncio

async def track_announcements():
    while True:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
        await asyncio.sleep(600)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (10 –º–∏–Ω—É—Ç)

async def main():
    dp.message.register(start_command, Command("start"))
    dp.message.register(handle_link)
    dp.callback_query.register(handle_navigation)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id FROM users WHERE tracking_filter IS NOT NULL AND subscription_active = TRUE")
    users = cursor.fetchall()

    # –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user in users:
        user_id = user[0]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    loop = asyncio.get_event_loop()
    loop.create_task(track_announcements())

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
